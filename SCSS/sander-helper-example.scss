// Flex mixin
@mixin flex($display, $direction, $mainAxis, $crossAxis) {

    /// Display
    @if $display == block {
      display: flex;
    } @else if $display == inline {
      display: inline-flex;
    }
  
    /// Direction
    flex-direction: $direction;
  
    /// Main axis
    @if $mainAxis == start {
      justify-content: flex-start;
    } @else if $mainAxis == end {
      justify-content: flex-end;
    } @else {
      justify-content: $mainAxis;
    }
  
    /// Cross axis
    @if $crossAxis == start {
      align-items: flex-start;
    } @else if $crossAxis == end {
      align-items: flex-end;
    } @else {
      align-items: $crossAxis;
    }
  }
  
  // Curve function
  @function curve($name: standard, $curve: null) {
    @if $name == standard {
      $curve: cubic-bezier(0.4, 0.0, 0.2, 1);
    } @else if $name == deceleration {
      $curve: cubic-bezier(0.0, 0.0, 0.2, 1);
    } @else if $name == acceleration {
      $curve: cubic-bezier(0.4, 0.0, 1, 1);
    } @else if $name == sharp {
      $curve: cubic-bezier(0.4, 0.0, 0.6, 1);
    } @else if $name == bounce {
      $curve: cubic-bezier(.61, .4, 0, 1.46);
    }
    @return $curve;
  }
  
  // Vendor mixin
  @mixin vendor($prop, $val) {
    -webkit-#{$prop}: $val;
    -moz-#{$prop}: $val;
    -ms-#{$prop}: $val;
    -o-#{$prop}: $val;
    #{$prop}: $val;
  }
  
  // Appearance, user-select mixin
  @mixin appearance($val: none) {
    @include vendor(appearance, $val);
  }
  @mixin user-select($val: none) {
    @include vendor(user-select, $val);
  }
  
  // Border-radius mixin
  @mixin border-radius($radius) {
    @include vendor(border-radius, $radius);
  }
  
  // Box-shadow function & mixin
  @function box-shadow($y) {
    $blur: $y * 2 * 2;
    @return 0 #{$y}px #{$blur}px 0 rgba(black, .16);
  }
  @mixin box-shadow($level) {
    @include vendor(box-shadow, box-shadow($level));
  }
  
  // Transition, transform, animation mixins
  @mixin transition($duration, $timing) {
    @include vendor(transition, $duration $timing);
  }
  @mixin transform($val) {
    @include vendor(transform, $val);
  }
  
  //// Layout mixins
  @mixin layout-row($justify) {
    width: 100%;
    @include flex(block, row, $justify, center);
  }
  @mixin layout-row__list($direction, $padding: 0 8px) {
    @if $direction == left {
      @include flex(block, row, start, center);
      $padding: 0 8px 0 0;
      padding: 0 0 0 8px;
    } @else if $direction == right {
      @include flex(block, row-reverse, start, center);
      $padding: 0 0 0 8px;
      padding: 0 8px 0 0;
    }
    li {
      padding: $padding;
      a {
        position: relative;
        @include flex(block, row, center, center);
      }
    }
  }
  
  @mixin depth($z: 1, $inverted: false) {
    @if $z < 1 {
      box-shadow: none;
    } @else if $z > 5 {
      @warn "Invalid $z `#{$z}` for mixin `depth`.";
    } @else {
      box-shadow: bottom-shadow($z, $inverted), top-shadow($z, $inverted);
    }
  }
  @function top-shadow($z, $inverted) {
    $primary-offset: nth(1.5 3 10 14 19, $z) * 1px;
    $blur: nth(1.5 3 10 14 19, $z) * 4px;
    @if $inverted == true {
      $primary-offset: nth(-1.5 -3 -10 -14 -19, $z) * 1px;
    }
    $color: rgba(black, nth(.12 .16 .19 .25 .30, $z));
  
    @return 0 $primary-offset $blur $color;
  }
  @function bottom-shadow($z, $inverted) {
    $primary-offset: nth(1.5 3 6 10 15, $z) * 1px;
    $blur: nth(1 3 6 10 15, $z) * 4px;
    @if $inverted == true {
      $primary-offset: nth(-1.5 -3 -6 -10 -15, $z) * 1px;
    }
    $color: rgba(black, nth(.24 .23 .23 .22 .22, $z));
  
    @return 0 $primary-offset $blur $color;
  }
  
  @mixin shadow($dp: 1) {
    @if $dp == 0 { box-shadow: none; }
    @else {
      $blur: if($dp == 1, 3, $dp * 2);
      $amba: ($dp + 11) / 100;
      $diry: $dp - floor($dp / 4);
      $dirb: floor(($dp + 5) / 2);
      $dira: (24 - (round($dp / 10))) / 100;
      box-shadow: 0px #{$dp + 'px'} #{$blur + 'px'} rgba(0, 0, 0, $amba), 0px #{$diry + 'px'} #{$dirb + 'px'} rgba(0, 0, 0, $dira);
    }
  }